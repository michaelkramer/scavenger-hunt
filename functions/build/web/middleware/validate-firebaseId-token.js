"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _firebaseAdmin = _interopRequireDefault(require("firebase-admin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Express middleware that validates Firebase ID Tokens passed in the Authorization HTTP header.
// The Firebase ID token needs to be passed as a Bearer token in the Authorization HTTP header like this:
// `Authorization: Bearer <Firebase ID Token>`.
// when decoded successfully, the ID Token content will be added as `req.user`.
const validateFirebaseIdToken = async (req, res, next) => {
  if (!_firebaseAdmin.default.apps.length) {
    _firebaseAdmin.default.initializeApp();
  }

  console.log("Check if request is authorized with Firebase ID token");

  if ((!req.headers.authorization || !req.headers.authorization.startsWith("Bearer ")) && !(req.cookies && req.cookies.__session)) {
    console.error("No Firebase ID token was passed as a Bearer token in the Authorization header.", "Make sure you authorize your request by providing the following HTTP header:", "Authorization: Bearer <Firebase ID Token>", 'or by passing a "__session" cookie.');
    res.status(403).send("Unauthorized");
    return;
  }

  let idToken;

  if (req.headers.authorization && req.headers.authorization.startsWith("Bearer ")) {
    console.log('Found "Authorization" header'); // Read the ID Token from the Authorization header.

    idToken = req.headers.authorization.split("Bearer ")[1];
  } else if (req.cookies) {
    console.log('Found "__session" cookie'); // Read the ID Token from cookie.

    idToken = req.cookies.__session;
  } else {
    // No cookie
    res.status(403).send("Unauthorized");
    return;
  }

  try {
    const decodedIdToken = await _firebaseAdmin.default.auth().verifyIdToken(idToken);
    console.log("ID Token correctly decoded", decodedIdToken);
    req.user = decodedIdToken;
    next();
    return;
  } catch (error) {
    console.error("Error while verifying Firebase ID token:", error);
    res.status(403).send("Unauthorized");
    return;
  }
};

var _default = validateFirebaseIdToken;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93ZWIvbWlkZGxld2FyZS92YWxpZGF0ZS1maXJlYmFzZUlkLXRva2VuLnRzIl0sIm5hbWVzIjpbInZhbGlkYXRlRmlyZWJhc2VJZFRva2VuIiwicmVxIiwicmVzIiwibmV4dCIsIkZpcmVBZG1pbiIsImFwcHMiLCJsZW5ndGgiLCJpbml0aWFsaXplQXBwIiwiY29uc29sZSIsImxvZyIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwic3RhcnRzV2l0aCIsImNvb2tpZXMiLCJfX3Nlc3Npb24iLCJlcnJvciIsInN0YXR1cyIsInNlbmQiLCJpZFRva2VuIiwic3BsaXQiLCJkZWNvZGVkSWRUb2tlbiIsImF1dGgiLCJ2ZXJpZnlJZFRva2VuIiwidXNlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSx1QkFBdUIsR0FBRyxPQUM5QkMsR0FEOEIsRUFFOUJDLEdBRjhCLEVBRzlCQyxJQUg4QixLQUkzQjtBQUNILE1BQUksQ0FBQ0MsdUJBQVVDLElBQVYsQ0FBZUMsTUFBcEIsRUFBNEI7QUFDMUJGLDJCQUFVRyxhQUFWO0FBQ0Q7O0FBQ0RDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHVEQUFaOztBQUVBLE1BQ0UsQ0FBQyxDQUFDUixHQUFHLENBQUNTLE9BQUosQ0FBWUMsYUFBYixJQUNDLENBQUNWLEdBQUcsQ0FBQ1MsT0FBSixDQUFZQyxhQUFaLENBQTBCQyxVQUExQixDQUFxQyxTQUFyQyxDQURILEtBRUEsRUFBRVgsR0FBRyxDQUFDWSxPQUFKLElBQWVaLEdBQUcsQ0FBQ1ksT0FBSixDQUFZQyxTQUE3QixDQUhGLEVBSUU7QUFDQU4sSUFBQUEsT0FBTyxDQUFDTyxLQUFSLENBQ0UsZ0ZBREYsRUFFRSw4RUFGRixFQUdFLDJDQUhGLEVBSUUscUNBSkY7QUFNQWIsSUFBQUEsR0FBRyxDQUFDYyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsY0FBckI7QUFDQTtBQUNEOztBQUVELE1BQUlDLE9BQUo7O0FBQ0EsTUFDRWpCLEdBQUcsQ0FBQ1MsT0FBSixDQUFZQyxhQUFaLElBQ0FWLEdBQUcsQ0FBQ1MsT0FBSixDQUFZQyxhQUFaLENBQTBCQyxVQUExQixDQUFxQyxTQUFyQyxDQUZGLEVBR0U7QUFDQUosSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksOEJBQVosRUFEQSxDQUVBOztBQUNBUyxJQUFBQSxPQUFPLEdBQUdqQixHQUFHLENBQUNTLE9BQUosQ0FBWUMsYUFBWixDQUEwQlEsS0FBMUIsQ0FBZ0MsU0FBaEMsRUFBMkMsQ0FBM0MsQ0FBVjtBQUNELEdBUEQsTUFPTyxJQUFJbEIsR0FBRyxDQUFDWSxPQUFSLEVBQWlCO0FBQ3RCTCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwwQkFBWixFQURzQixDQUV0Qjs7QUFDQVMsSUFBQUEsT0FBTyxHQUFHakIsR0FBRyxDQUFDWSxPQUFKLENBQVlDLFNBQXRCO0FBQ0QsR0FKTSxNQUlBO0FBQ0w7QUFDQVosSUFBQUEsR0FBRyxDQUFDYyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsY0FBckI7QUFDQTtBQUNEOztBQUVELE1BQUk7QUFDRixVQUFNRyxjQUFjLEdBQUcsTUFBTWhCLHVCQUFVaUIsSUFBVixHQUFpQkMsYUFBakIsQ0FBK0JKLE9BQS9CLENBQTdCO0FBQ0FWLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUFaLEVBQTBDVyxjQUExQztBQUNBbkIsSUFBQUEsR0FBRyxDQUFDc0IsSUFBSixHQUFXSCxjQUFYO0FBQ0FqQixJQUFBQSxJQUFJO0FBQ0o7QUFDRCxHQU5ELENBTUUsT0FBT1ksS0FBUCxFQUFjO0FBQ2RQLElBQUFBLE9BQU8sQ0FBQ08sS0FBUixDQUFjLDBDQUFkLEVBQTBEQSxLQUExRDtBQUNBYixJQUFBQSxHQUFHLENBQUNjLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixjQUFyQjtBQUNBO0FBQ0Q7QUFDRixDQXRERDs7ZUF3RGVqQix1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGaXJlQWRtaW4gZnJvbSBcImZpcmViYXNlLWFkbWluXCI7XG5pbXBvcnQgeyBOZXh0RnVuY3Rpb24gfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcblxuLy8gRXhwcmVzcyBtaWRkbGV3YXJlIHRoYXQgdmFsaWRhdGVzIEZpcmViYXNlIElEIFRva2VucyBwYXNzZWQgaW4gdGhlIEF1dGhvcml6YXRpb24gSFRUUCBoZWFkZXIuXG4vLyBUaGUgRmlyZWJhc2UgSUQgdG9rZW4gbmVlZHMgdG8gYmUgcGFzc2VkIGFzIGEgQmVhcmVyIHRva2VuIGluIHRoZSBBdXRob3JpemF0aW9uIEhUVFAgaGVhZGVyIGxpa2UgdGhpczpcbi8vIGBBdXRob3JpemF0aW9uOiBCZWFyZXIgPEZpcmViYXNlIElEIFRva2VuPmAuXG4vLyB3aGVuIGRlY29kZWQgc3VjY2Vzc2Z1bGx5LCB0aGUgSUQgVG9rZW4gY29udGVudCB3aWxsIGJlIGFkZGVkIGFzIGByZXEudXNlcmAuXG5jb25zdCB2YWxpZGF0ZUZpcmViYXNlSWRUb2tlbiA9IGFzeW5jIChcbiAgcmVxOiBSZXF1ZXN0LFxuICByZXM6IFJlc3BvbnNlLFxuICBuZXh0OiBOZXh0RnVuY3Rpb24sXG4pID0+IHtcbiAgaWYgKCFGaXJlQWRtaW4uYXBwcy5sZW5ndGgpIHtcbiAgICBGaXJlQWRtaW4uaW5pdGlhbGl6ZUFwcCgpO1xuICB9XG4gIGNvbnNvbGUubG9nKFwiQ2hlY2sgaWYgcmVxdWVzdCBpcyBhdXRob3JpemVkIHdpdGggRmlyZWJhc2UgSUQgdG9rZW5cIik7XG5cbiAgaWYgKFxuICAgICghcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiB8fFxuICAgICAgIXJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3RhcnRzV2l0aChcIkJlYXJlciBcIikpICYmXG4gICAgIShyZXEuY29va2llcyAmJiByZXEuY29va2llcy5fX3Nlc3Npb24pXG4gICkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBcIk5vIEZpcmViYXNlIElEIHRva2VuIHdhcyBwYXNzZWQgYXMgYSBCZWFyZXIgdG9rZW4gaW4gdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyLlwiLFxuICAgICAgXCJNYWtlIHN1cmUgeW91IGF1dGhvcml6ZSB5b3VyIHJlcXVlc3QgYnkgcHJvdmlkaW5nIHRoZSBmb2xsb3dpbmcgSFRUUCBoZWFkZXI6XCIsXG4gICAgICBcIkF1dGhvcml6YXRpb246IEJlYXJlciA8RmlyZWJhc2UgSUQgVG9rZW4+XCIsXG4gICAgICAnb3IgYnkgcGFzc2luZyBhIFwiX19zZXNzaW9uXCIgY29va2llLicsXG4gICAgKTtcbiAgICByZXMuc3RhdHVzKDQwMykuc2VuZChcIlVuYXV0aG9yaXplZFwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaWRUb2tlbjtcbiAgaWYgKFxuICAgIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gJiZcbiAgICByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnN0YXJ0c1dpdGgoXCJCZWFyZXIgXCIpXG4gICkge1xuICAgIGNvbnNvbGUubG9nKCdGb3VuZCBcIkF1dGhvcml6YXRpb25cIiBoZWFkZXInKTtcbiAgICAvLyBSZWFkIHRoZSBJRCBUb2tlbiBmcm9tIHRoZSBBdXRob3JpemF0aW9uIGhlYWRlci5cbiAgICBpZFRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdChcIkJlYXJlciBcIilbMV07XG4gIH0gZWxzZSBpZiAocmVxLmNvb2tpZXMpIHtcbiAgICBjb25zb2xlLmxvZygnRm91bmQgXCJfX3Nlc3Npb25cIiBjb29raWUnKTtcbiAgICAvLyBSZWFkIHRoZSBJRCBUb2tlbiBmcm9tIGNvb2tpZS5cbiAgICBpZFRva2VuID0gcmVxLmNvb2tpZXMuX19zZXNzaW9uO1xuICB9IGVsc2Uge1xuICAgIC8vIE5vIGNvb2tpZVxuICAgIHJlcy5zdGF0dXMoNDAzKS5zZW5kKFwiVW5hdXRob3JpemVkXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZGVjb2RlZElkVG9rZW4gPSBhd2FpdCBGaXJlQWRtaW4uYXV0aCgpLnZlcmlmeUlkVG9rZW4oaWRUb2tlbik7XG4gICAgY29uc29sZS5sb2coXCJJRCBUb2tlbiBjb3JyZWN0bHkgZGVjb2RlZFwiLCBkZWNvZGVkSWRUb2tlbik7XG4gICAgcmVxLnVzZXIgPSBkZWNvZGVkSWRUb2tlbjtcbiAgICBuZXh0KCk7XG4gICAgcmV0dXJuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSB2ZXJpZnlpbmcgRmlyZWJhc2UgSUQgdG9rZW46XCIsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMykuc2VuZChcIlVuYXV0aG9yaXplZFwiKTtcbiAgICByZXR1cm47XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlRmlyZWJhc2VJZFRva2VuO1xuIl19